services:
  prometheus:
    image: prom/prometheus:v2.47.0 # Using a specific version is good practice
    container_name: prometheus
    ports:
      - "9090:9090" # Prometheus UI and API
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml # Mount Prometheus configuration
      - prometheus-data:/prometheus # Persist Prometheus data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus' # Path for Prometheus data storage
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - monitoring-network

  node-exporter: # This node-exporter monitors the EC2 instance where Prometheus is running
    image: prom/node-exporter:v1.7.0 # Using a specific version is good practice
    container_name: node-exporter
    hostname: node-exporter # Optional: helps identify the host in Grafana if you have multiple
    pid: "host"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - monitoring-network
    restart: unless-stopped

networks:
  monitoring-network:
    driver: bridge # Default Docker network driver

volumes:
  prometheus-data: {} # Define the named volume for Prometheus data
